# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 Ansible, Inc
# This file is distributed under the same license as the Ansible Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 0.01\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-17 17:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rst/faq.rst:2
msgid "Frequently Asked Questions"
msgstr ""

#: ../../../rst/faq.rst:4
msgid "Here are some commonly-asked questions and their answers."
msgstr ""

#: ../../../rst/faq.rst:9
msgid "How can I set the PATH or any other environment variable for a task or entire playbook?"
msgstr ""

#: ../../../rst/faq.rst:11
msgid "Setting environment variables can be done with the `environment` keyword. It can be used at task or playbook level::"
msgstr ""

#: ../../../rst/faq.rst:20
msgid "How do I handle different machines needing different user accounts or ports to log in with?"
msgstr ""

#: ../../../rst/faq.rst:22
msgid "Setting inventory variables in the inventory file is the easiest way."
msgstr ""

#: ../../../rst/faq.rst:24
msgid "For instance, suppose these hosts have different usernames and ports::"
msgstr ""

#: ../../../rst/faq.rst:30
msgid "You can also dictate the connection type to be used, if you want::"
msgstr ""

#: ../../../rst/faq.rst:38
msgid "You may also wish to keep these in group variables instead, or file in them in a group_vars/<groupname> file. See the rest of the documentation for more information about how to organize variables."
msgstr ""

#: ../../../rst/faq.rst:44
msgid "How do I get ansible to reuse connections, enable Kerberized SSH, or have Ansible pay attention to my local SSH config file?"
msgstr ""

#: ../../../rst/faq.rst:46
msgid "Switch your default connection type in the configuration file to 'ssh', or use '-c ssh' to use Native OpenSSH for connections instead of the python paramiko library.  In Ansible 1.2.1 and later, 'ssh' will be used by default if OpenSSH is new enough to support ControlPersist as an option."
msgstr ""

#: ../../../rst/faq.rst:50
msgid "Paramiko is great for starting out, but the OpenSSH type offers many advanced options.  You will want to run Ansible from a machine new enough to support ControlPersist, if you are using this connection type.  You can still manage older clients.  If you are using RHEL 6, CentOS 6, SLES 10 or SLES 11 the version of OpenSSH is still a bit old, so consider managing from a Fedora or openSUSE client even though you are managing older nodes, or just use paramiko."
msgstr ""

#: ../../../rst/faq.rst:55
msgid "We keep paramiko as the default as if you are first installing Ansible on an EL box, it offers a better experience for new users."
msgstr ""

#: ../../../rst/faq.rst:61
msgid "How do I speed up management inside EC2?"
msgstr ""

#: ../../../rst/faq.rst:63
msgid "Don't try to manage a fleet of EC2 machines from your laptop.  Connect to a management node inside EC2 first and run Ansible from there."
msgstr ""

#: ../../../rst/faq.rst:69
msgid "How do I handle python pathing not having a Python 2.X in /usr/bin/python on a remote machine?"
msgstr ""

#: ../../../rst/faq.rst:71
msgid "While you can write ansible modules in any language, most ansible modules are written in Python, and some of these are important core ones."
msgstr ""

#: ../../../rst/faq.rst:74
msgid "By default Ansible assumes it can find a /usr/bin/python on your remote system that is a 2.X version of Python, specifically 2.4 or higher."
msgstr ""

#: ../../../rst/faq.rst:77
msgid "Setting of an inventory variable 'ansible_python_interpreter' on any host will allow Ansible to auto-replace the interpreter used when executing python modules.   Thus, you can point to any python you want on the system if /usr/bin/python on your system does not point to a Python 2.X interpreter."
msgstr ""

#: ../../../rst/faq.rst:81
msgid "Some Linux operating systems, such as Arch, may only have Python 3 installed by default.  This is not sufficient and you will get syntax errors trying to run modules with Python 3.  Python 3 is essentially not the same language as Python 2.  Ansible modules currently need to support older Pythons for users that  still have Enterprise Linux 5 deployed, so they are not yet ported to run under Python 3.0.  This is not a problem though as you can just install Python 2 also on a managed host."
msgstr ""

#: ../../../rst/faq.rst:85
msgid "Python 3.0 support will likely be addressed at a later point in time when usage becomes more mainstream."
msgstr ""

#: ../../../rst/faq.rst:87
msgid "Do not replace the shebang lines of your python modules.  Ansible will do this for you automatically at deploy time."
msgstr ""

#: ../../../rst/faq.rst:92
msgid "What is the best way to make content reusable/redistributable?"
msgstr ""

#: ../../../rst/faq.rst:94
msgid "If you have not done so already, read all about \"Roles\" in the playbooks documentation.  This helps you make playbook content self-contained, and works well with things like git submodules for sharing content with others."
msgstr ""

#: ../../../rst/faq.rst:97
msgid "If some of these plugin types look strange to you, see the API documentation for more details about ways Ansible can be extended."
msgstr ""

#: ../../../rst/faq.rst:102
msgid "Where does the configuration file live and what can I configure in it?"
msgstr ""

#: ../../../rst/faq.rst:105
msgid "See :doc:`intro_configuration`."
msgstr ""

#: ../../../rst/faq.rst:110
msgid "How do I disable cowsay?"
msgstr ""

#: ../../../rst/faq.rst:112
msgid "If cowsay is installed, Ansible takes it upon itself to make your day happier when running playbooks.  If you decide that you would like to work in a professional cow-free environment, you can either uninstall cowsay, or set an environment variable::"
msgstr ""

#: ../../../rst/faq.rst:120
msgid "How do I see a list of all of the ansible\\_ variables?"
msgstr ""

#: ../../../rst/faq.rst:122
msgid "Ansible by default gathers \"facts\" about the machines under management, and these facts can be accessed in Playbooks and in templates. To see a list of all of the facts that are available about a machine, you can run the \"setup\" module as an ad-hoc action::"
msgstr ""

#: ../../../rst/faq.rst:126
msgid "This will print out a dictionary of all of the facts that are available for that particular host."
msgstr ""

#: ../../../rst/faq.rst:131
msgid "How do I loop over a list of hosts in a group, inside of a template?"
msgstr ""

#: ../../../rst/faq.rst:133
msgid "A pretty common pattern is to iterate over a list of hosts inside of a host group, perhaps to populate a template configuration file with a list of servers. To do this, you can just access the \"$groups\" dictionary in your template, like this::"
msgstr ""

#: ../../../rst/faq.rst:140
msgid "If you need to access facts about these hosts, for instance, the IP address of each hostname, you need to make sure that the facts have been populated. For example, make sure you have a play that talks to db_servers::"
msgstr ""

#: ../../../rst/faq.rst:146
msgid "Then you can use the facts inside your template, like this::"
msgstr ""

#: ../../../rst/faq.rst:155
msgid "How do I access a variable name programmatically?"
msgstr ""

#: ../../../rst/faq.rst:157
msgid "An example may come up where we need to get the ipv4 address of an arbitrary interface, where the interface to be used may be supplied via a role parameter or other input.  Variable names can be built by adding strings together, like so::"
msgstr ""

#: ../../../rst/faq.rst:162
msgid "The trick about going through hostvars is necessary because it's a dictionary of the entire namespace of variables.  'inventory_hostname' is a magic variable that indicates the current host you are looping over in the host loop."
msgstr ""

#: ../../../rst/faq.rst:168
msgid "How do I access a variable of the first host in a group?"
msgstr ""

#: ../../../rst/faq.rst:170
msgid "What happens if we want the ip address of the first webserver in the webservers group?  Well, we can do that too.  Note that if we are using dynamic inventory, which host is the 'first' may not be consistent, so you wouldn't want to do this unless your inventory was static and predictable.  (If you are using :doc:`tower`, it will use database order, so this isn't a problem even if you are using cloud based inventory scripts)."
msgstr ""

#: ../../../rst/faq.rst:175
msgid "Anyway, here's the trick::"
msgstr ""

#: ../../../rst/faq.rst:179
msgid "Notice how we're pulling out the hostname of the first machine of the webservers group.  If you are doing this in a template, you could use the Jinja2 '#set' directive to simplify this, or in a playbook, you could also use set_fact:"
msgstr ""

#: ../../../rst/faq.rst:182
msgid "set_fact: headnode={{ groups[['webservers'][0]] }}"
msgstr ""

#: ../../../rst/faq.rst:184
msgid "debug: msg={{ hostvars[headnode].ansible_eth0.ipv4.address }}"
msgstr ""

#: ../../../rst/faq.rst:186
msgid "Notice how we interchanged the bracket syntax for dots -- that can be done anywhere."
msgstr ""

#: ../../../rst/faq.rst:191
msgid "How do I copy files recursively onto a target host?"
msgstr ""

#: ../../../rst/faq.rst:193
msgid "The \"copy\" module has a recursive parameter, though if you want to do something more efficient for a large number of files, take a look at the \"synchronize\" module instead, which wraps rsync.  See the module index for info on both of these modules."
msgstr ""

#: ../../../rst/faq.rst:198
msgid "How do I access shell environment variables?"
msgstr ""

#: ../../../rst/faq.rst:200
msgid "If you just need to access existing variables, use the 'env' lookup plugin.  For example, to access the value of the HOME environment variable on management machine::"
msgstr ""

#: ../../../rst/faq.rst:208
msgid "If you need to set environment variables, see the Advanced Playbooks section about environments."
msgstr ""

#: ../../../rst/faq.rst:210
msgid "Ansible 1.4 will also make remote environment variables available via facts in the 'ansible_env' variable::"
msgstr ""

#: ../../../rst/faq.rst:217
msgid "How do I generate crypted passwords for the user module?"
msgstr ""

#: ../../../rst/faq.rst:219
msgid "The mkpasswd utility that is available on most Linux systems is a great option::"
msgstr ""

#: ../../../rst/faq.rst:223
msgid "If this utility is not installed on your system (e.g. you are using OS X) then you can still easily generate these passwords using Python. First, ensure that the `Passlib <https://code.google.com/p/passlib/>`_ password hashing library is installed."
msgstr ""

#: ../../../rst/faq.rst:227
msgid "pip install passlib"
msgstr ""

#: ../../../rst/faq.rst:229
msgid "Once the library is ready, SHA512 password values can then be generated as follows::"
msgstr ""

#: ../../../rst/faq.rst:236
msgid "Can I get training on Ansible or find commercial support?"
msgstr ""

#: ../../../rst/faq.rst:238
msgid "Yes!  See `our Guru offering <http://www.ansible.com/ansible-guru>`_ for online support, and support is also included with :doc:`tower`. You can also read our `service page <http://www.ansible.com/ansible-services>`_ and email `info@ansible.com <mailto:info@ansible.com>`_ for further details."
msgstr ""

#: ../../../rst/faq.rst:243
msgid "Is there a web interface / REST API / etc?"
msgstr ""

#: ../../../rst/faq.rst:245
msgid "Yes!  Ansible, Inc makes a great product that makes Ansible even more powerful and easy to use. See :doc:`tower`."
msgstr ""

#: ../../../rst/faq.rst:251
msgid "How do I submit a change to the documentation?"
msgstr ""

#: ../../../rst/faq.rst:253
msgid "Great question!  Documentation for Ansible is kept in the main project git repository, and complete instructions for contributing can be found in the docs README `viewable on GitHub <https://github.com/ansible/ansible/blob/devel/docsite/README.md>`_.  Thanks!"
msgstr ""

#: ../../../rst/faq.rst:258
msgid "How do I keep secret data in my playbook?"
msgstr ""

#: ../../../rst/faq.rst:260
msgid "If you would like to keep secret data in your Ansible content and still share it publicly or keep things in source control, see :doc:`playbooks_vault`."
msgstr ""

#: ../../../rst/faq.rst:264
msgid "In Ansible 1.8 and later, if you have a task that you don't want to show the results or command given to it when using -v (verbose) mode, the following task or playbook attribute can be useful::"
msgstr ""

#: ../../../rst/faq.rst:270
msgid "This can be used to keep verbose output but hide sensitive information from others who would otherwise like to be able to see the output."
msgstr ""

#: ../../../rst/faq.rst:272
msgid "The no_log attribute can also apply to an entire play::"
msgstr ""

#: ../../../rst/faq.rst:277
msgid "Though this will make the play somewhat difficult to debug.  It's recommended that this be applied to single tasks only, once a playbook is completed."
msgstr ""

#: ../../../rst/faq.rst:281
msgid "I don't see my question here"
msgstr ""

#: ../../../rst/faq.rst:283
msgid "Please see the section below for a link to IRC and the Google Group, where you can ask your question there."
msgstr ""

#: ../../../rst/faq.rst:287
msgid ":doc:`index`"
msgstr ""

#: ../../../rst/faq.rst:288
msgid "The documentation index"
msgstr ""

#: ../../../rst/faq.rst:289
msgid ":doc:`playbooks`"
msgstr ""

#: ../../../rst/faq.rst:290
msgid "An introduction to playbooks"
msgstr ""

#: ../../../rst/faq.rst:291
msgid ":doc:`playbooks_best_practices`"
msgstr ""

#: ../../../rst/faq.rst:292
msgid "Best practices advice"
msgstr ""

#: ../../../rst/faq.rst:293
msgid "`User Mailing List <http://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../../rst/faq.rst:294
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../../rst/faq.rst:295
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../../rst/faq.rst:296
msgid "#ansible IRC chat channel"
msgstr ""

