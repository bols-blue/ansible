# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 Ansible, Inc
# This file is distributed under the same license as the Ansible Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 0.01\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-17 17:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rst/playbooks_best_practices.rst:2
msgid "Best Practices"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:4
msgid "Here are some tips for making the most of Ansible and Ansible playbooks."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:6
msgid "You can find some example playbooks illustrating these best practices in our `ansible-examples repository <https://github.com/ansible/ansible-examples>`_.  (NOTE: These may not use all of the features in the latest release, but are still an excellent reference!)."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:0
msgid "Topics"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:13
msgid "Content Organization"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:15
msgid "The following section shows one of many possible ways to organize playbook content."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:17
msgid "Your usage of Ansible should fit your needs, however, not ours, so feel free to modify this approach and organize as you see fit."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:19
msgid "One thing you will definitely want to do though, is use the \"roles\" organization feature, which is documented as part of the main playbooks page.  See :doc:`playbooks_roles`.  You absolutely should be using roles.  Roles are great.  Use roles.  Roles! Did we say that enough?  Roles are great."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:26
msgid "Directory Layout"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:28
msgid "The top level of the directory would contain files and directories like so::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:74
msgid "Use Dynamic Inventory With Clouds"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:76
msgid "If you are using a cloud provider, you should not be managing your inventory in a static file.  See :doc:`intro_dynamic_inventory`."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:78
msgid "This does not just apply to clouds -- If you have another system maintaining a canonical list of systems in your infrastructure, usage of dynamic inventory is a great idea in general."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:84
msgid "How to Differentiate  Stage vs Production"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:86
msgid "If managing static inventory, it is frequently asked how to differentiate different types of environments.  The following example shows a good way to do this.  Similar methods of grouping could be adapted to dynamic inventory (for instance, consider applying the AWS tag \"environment:production\", and you'll get a group of systems automatically discovered named \"ec2_tag_environment_production\"."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:90
msgid "Let's show a static inventory example though.  Below, the *production* file contains the inventory of all of your production hosts."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:92
msgid "It is suggested that you define groups based on purpose of the host (roles) and also geography or datacenter location (if applicable)::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:134
msgid "Group And Host Variables"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:136
msgid "This section extends on the previous example."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:138
msgid "Groups are nice for organization, but that's not all groups are good for.  You can also assign variables to them!  For instance, atlanta has its own NTP servers, so when setting up ntp.conf, we should use them.  Let's set those now::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:145
msgid "Variables aren't just for geographic information either!  Maybe the webservers have some configuration that doesn't make sense for the database servers::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:152
msgid "If we had any default values, or values that were universally true, we would put them in a file called group_vars/all::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:159
msgid "We can define specific hardware variance in systems in a host_vars file, but avoid doing this unless you need to::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:166
msgid "Again, if we are using dynamic inventory sources, many dynamic groups are automatically created.  So a tag like \"class:webserver\" would load in variables from the file \"group_vars/ec2_tag_class_webserver\" automatically."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:172
msgid "Top Level Playbooks Are Separated By Role"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:174
msgid "In site.yml, we include a playbook that defines our entire infrastructure.  Note this is SUPER short, because it's just including some other playbooks.  Remember, playbooks are nothing more than lists of plays::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:182
msgid "In a file like webservers.yml (also at the top level), we simply map the configuration of the webservers group to the roles performed by the webservers group.  Also notice this is incredibly short.  For example::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:191
msgid "The idea here is that we can choose to configure our whole infrastructure by \"running\" site.yml or we could just choose to run a subset by running webservers.yml.  This is analogous to the \"--limit\" parameter to ansible but a little more explicit::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:200
msgid "Task And Handler Organization For A Role"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:202
msgid "Below is an example tasks file that explains how a role works.  Our common role here just sets up NTP, but it could do more if we wanted::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:221
msgid "Here is an example handlers file.  As a review, handlers are only fired when certain tasks report changes, and are run at the end of each play::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:229
msgid "See :doc:`playbooks_roles` for more information."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:235
msgid "What This Organization Enables (Examples)"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:237
msgid "Above we've shared our basic organizational structure."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:239
msgid "Now what sort of use cases does this layout enable?  Lots!  If I want to reconfigure my whole infrastructure, it's just::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:243
msgid "What about just reconfiguring NTP on everything?  Easy.::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:247
msgid "What about just reconfiguring my webservers?::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:251
msgid "What about just my webservers in Boston?::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:255
msgid "What about just the first 10, and then the next 10?::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:260
msgid "And of course just basic ad-hoc stuff is also possible.::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:265
msgid "And there are some useful commands to know (at least in 1.1 and higher)::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:276
msgid "Deployment vs Configuration Organization"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:278
msgid "The above setup models a typical configuration topology.  When doing multi-tier deployments, there are going to be some additional playbooks that hop between tiers to roll out an application.  In this case, 'site.yml' may be augmented by playbooks like 'deploy_exampledotcom.yml' but the general concepts can still apply."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:282
msgid "Consider \"playbooks\" as a sports metaphor -- you don't have to just have one set of plays to use against your infrastructure all the time -- you can have situational plays that you use at different times and for different purposes."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:285
msgid "Ansible allows you to deploy and configure using the same tool, so you would likely reuse groups and just keep the OS configuration in separate playbooks from the app deployment."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:291
msgid "Stage vs Production"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:293
msgid "As also mentioned above, a good way to keep your stage (or testing) and production environments separate is to use a separate inventory file for stage and production.   This way you pick with -i what you are targeting.  Keeping them all in one file can lead to surprises!"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:295
msgid "Testing things in a stage environment before trying in production is always a great idea.  Your environments need not be the same size and you can use group variables to control the differences between those environments."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:301
msgid "Rolling Updates"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:303
msgid "Understand the 'serial' keyword.  If updating a webserver farm you really want to use it to control how many machines you are updating at once in the batch."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:306
msgid "See :doc:`playbooks_delegation`."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:311
msgid "Always Mention The State"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:313
msgid "The 'state' parameter is optional to a lot of modules.  Whether 'state=present' or 'state=absent', it's always best to leave that parameter in your playbooks to make it clear, especially as some modules support additional states."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:319
msgid "Group By Roles"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:321
msgid "We're somewhat repeating ourselves with this tip, but it's worth repeating. A system can be in multiple groups.  See :doc:`intro_inventory` and :doc:`intro_patterns`.   Having groups named after things like *webservers* and *dbservers* is repeated in the examples because it's a very powerful concept."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:324
msgid "This allows playbooks to target machines based on role, as well as to assign role specific variables using the group variable system."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:327
msgid "See :doc:`playbooks_roles`."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:332
msgid "Operating System and Distribution Variance"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:334
msgid "When dealing with a parameter that is different between two different operating systems, a great way to handle this is by using the group_by module."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:337
msgid "This makes a dynamic group of hosts matching certain criteria, even if that group is not defined in the inventory file::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:353
msgid "This will throw all systems into a dynamic group based on the operating system name."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:355
msgid "If group-specific settings are needed, this can also be done. For example::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:365
msgid "In the above example, CentOS machines get the value of '42' for asdf, but other machines get '10'. This can be used not only to set variables, but also to apply certain roles to only certain systems."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:368
msgid "Alternatively, if only variables are needed::"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:375
msgid "This will pull in variables based on the OS name."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:380
msgid "Bundling Ansible Modules With Playbooks"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:382
msgid "If a playbook has a \"./library\" directory relative to its YAML file, this directory can be used to add ansible modules that will automatically be in the ansible module path.  This is a great way to keep modules that go with a playbook together.  This is shown in the directory structure example at the start of this section."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:389
msgid "Whitespace and Comments"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:391
msgid "Generous use of whitespace to break things up, and use of comments (which start with '#'), is encouraged."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:396
msgid "Always Name Tasks"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:398
msgid "It is possible to leave off the 'name' for a given task, though it is recommended to provide a description about why something is being done instead.  This name is shown when the playbook is run."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:404
msgid "Keep It Simple"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:406
msgid "When you can do something simply, do something simply.  Do not reach to use every feature of Ansible together, all at once.  Use what works for you.  For example, you will probably not need ``vars``, ``vars_files``, ``vars_prompt`` and ``--extra-vars`` all at once, while also using an external inventory file."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:412
msgid "If something feels complicated, it probably is, and may be a good opportunity to simplify things."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:417
msgid "Version Control"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:419
msgid "Use version control.  Keep your playbooks and inventory file in git (or another version control system), and commit when you make changes to them.  This way you have an audit trail describing when and why you changed the rules that are automating your infrastructure."
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:426
msgid ":doc:`YAMLSyntax`"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:427
msgid "Learn about YAML syntax"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:428
msgid ":doc:`playbooks`"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:429
msgid "Review the basic playbook features"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:430
msgid ":doc:`modules`"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:431
msgid "Learn about available modules"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:432
msgid ":doc:`developing_modules`"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:433
msgid "Learn how to extend Ansible by writing your own modules"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:434
msgid ":doc:`intro_patterns`"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:435
msgid "Learn about how to select hosts"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:436
msgid "`GitHub examples directory <https://github.com/ansible/ansible/tree/devel/examples/playbooks>`_"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:437
msgid "Complete playbook files from the github project source"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:438
msgid "`Mailing List <http://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../../rst/playbooks_best_practices.rst:439
msgid "Questions? Help? Ideas?  Stop by the list on Google Groups"
msgstr ""

