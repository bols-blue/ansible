# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 Ansible, Inc
# This file is distributed under the same license as the Ansible Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 0.01\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-17 17:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rst/guide_rax.rst:2
msgid "Rackspace Cloud Guide"
msgstr ""

#: ../../../rst/guide_rax.rst:7
msgid "Introduction"
msgstr ""

#: ../../../rst/guide_rax.rst:9
msgid "This section of the documentation is under construction. We are in the process of adding more examples about the Rackspace modules and how they work together.  Once complete, there will also be examples for Rackspace Cloud in `ansible-examples <http://github.com/ansible/ansible-examples/>`_."
msgstr ""

#: ../../../rst/guide_rax.rst:11
msgid "Ansible contains a number of core modules for interacting with Rackspace Cloud."
msgstr ""

#: ../../../rst/guide_rax.rst:13
msgid "The purpose of this section is to explain how to put Ansible modules together (and use inventory scripts) to use Ansible in a Rackspace Cloud context."
msgstr ""

#: ../../../rst/guide_rax.rst:16
msgid "Prerequisites for using the rax modules are minimal.  In addition to ansible itself, all of the modules require and are tested against pyrax 1.5 or higher. You'll need this Python module installed on the execution host."
msgstr ""

#: ../../../rst/guide_rax.rst:20
msgid "pyrax is not currently available in many operating system package repositories, so you will likely need to install it via pip:"
msgstr ""

#: ../../../rst/guide_rax.rst:27
msgid "The following steps will often execute from the control machine against the Rackspace Cloud API, so it makes sense to add localhost to the inventory file.  (Ansible may not require this manual step in the future):"
msgstr ""

#: ../../../rst/guide_rax.rst:35
msgid "In playbook steps, we'll typically be using the following pattern:"
msgstr ""

#: ../../../rst/guide_rax.rst:47
msgid "Credentials File"
msgstr ""

#: ../../../rst/guide_rax.rst:49
msgid "The `rax.py` inventory script and all `rax` modules support a standard `pyrax` credentials file that looks like:"
msgstr ""

#: ../../../rst/guide_rax.rst:57
msgid "Setting the environment parameter RAX_CREDS_FILE to the path of this file will help Ansible find how to load this information."
msgstr ""

#: ../../../rst/guide_rax.rst:60
msgid "More information about this credentials file can be found at https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating"
msgstr ""

#: ../../../rst/guide_rax.rst:67
msgid "Running from a Python Virtual Environment (Optional)"
msgstr ""

#: ../../../rst/guide_rax.rst:69
msgid "Most users will not be using virtualenv, but some users, particularly Python developers sometimes like to."
msgstr ""

#: ../../../rst/guide_rax.rst:71
msgid "There are special considerations when Ansible is installed to a Python virtualenv, rather than the default of installing at a global scope. Ansible assumes, unless otherwise instructed, that the python binary will live at /usr/bin/python.  This is done via the interpreter line in modules, however when instructed by setting the inventory variable 'ansible_python_interpreter', Ansible will use this specified path instead to find Python.  This can be a cause of confusion as one may assume that modules running on 'localhost', or perhaps running via 'local_action', are using the virtualenv Python interpreter.  By setting this line in the inventory, the modules will execute in the virtualenv interpreter and have available the virtualenv packages, specifically pyrax. If using virtualenv, you may wish to modify your localhost inventory definition to find this location as follows:"
msgstr ""

#: ../../../rst/guide_rax.rst:80
msgid "pyrax may be installed in the global Python package scope or in a virtual environment.  There are no special considerations to keep in mind when installing pyrax."
msgstr ""

#: ../../../rst/guide_rax.rst:85
msgid "Provisioning"
msgstr ""

#: ../../../rst/guide_rax.rst:87
msgid "Now for the fun parts."
msgstr ""

#: ../../../rst/guide_rax.rst:89
msgid "The 'rax' module provides the ability to provision instances within Rackspace Cloud.  Typically the provisioning task will be performed from your Ansible control server (in our example, localhost) against the Rackspace cloud API.  This is done for several reasons:"
msgstr ""

#: ../../../rst/guide_rax.rst:91
msgid "Avoiding installing the pyrax library on remote nodes"
msgstr ""

#: ../../../rst/guide_rax.rst:92
msgid "No need to encrypt and distribute credentials to remote nodes"
msgstr ""

#: ../../../rst/guide_rax.rst:93
msgid "Speed and simplicity"
msgstr ""

#: ../../../rst/guide_rax.rst:97
msgid "Authentication with the Rackspace-related modules is handled by either specifying your username and API key as environment variables or passing them as module arguments, or by specifying the location of a credentials file."
msgstr ""

#: ../../../rst/guide_rax.rst:102
msgid "Here is a basic example of provisioning an instance in ad-hoc mode:"
msgstr ""

#: ../../../rst/guide_rax.rst:108
msgid "Here's what it would look like in a playbook, assuming the parameters were defined in variables:"
msgstr ""

#: ../../../rst/guide_rax.rst:124
msgid "The rax module returns data about the nodes it creates, like IP addresses, hostnames, and login passwords.  By registering the return value of the step, it is possible used this data to dynamically add the resulting hosts to inventory (temporarily, in memory). This facilitates performing configuration actions on the hosts in a follow-on task.  In the following example, the servers that were successfully created using the above task are dynamically added to a group called \"raxhosts\", with each nodes hostname, IP address, and root password being added to the inventory."
msgstr ""

#: ../../../rst/guide_rax.rst:138
msgid "With the host group now created, the next play in this playbook could now configure servers belonging to the raxhosts group."
msgstr ""

#: ../../../rst/guide_rax.rst:149
msgid "The method above ties the configuration of a host with the provisioning step.  This isn't always what you want, and leads us to the next section."
msgstr ""

#: ../../../rst/guide_rax.rst:155
msgid "Host Inventory"
msgstr ""

#: ../../../rst/guide_rax.rst:157
msgid "Once your nodes are spun up, you'll probably want to talk to them again.  The best way to handle his is to use the \"rax\" inventory plugin, which dynamically queries Rackspace Cloud and tells Ansible what nodes you have to manage.  You might want to use this even if you are spinning up Ansible via other tools, including the Rackspace Cloud user interface. The inventory plugin can be used to group resources by metadata, region, OS, etc.  Utilizing metadata is highly recommended in \"rax\" and can provide an easy way to sort between host groups and roles. If you don't want to use the ``rax.py`` dynamic inventory script, you could also still choose to manually manage your INI inventory file, though this is less recommended."
msgstr ""

#: ../../../rst/guide_rax.rst:159
msgid "In Ansible it is quite possible to use multiple dynamic inventory plugins along with INI file data.  Just put them in a common directory and be sure the scripts are chmod +x, and the INI-based ones are not."
msgstr ""

#: ../../../rst/guide_rax.rst:164
msgid "rax.py"
msgstr ""

#: ../../../rst/guide_rax.rst:166
msgid "To use the rackspace dynamic inventory script, copy ``rax.py`` into your inventory directory and make it executable. You can specify a credentials file for ``rax.py`` utilizing the ``RAX_CREDS_FILE`` environment variable."
msgstr ""

#: ../../../rst/guide_rax.rst:168
msgid "Dynamic inventory scripts (like ``rax.py``) are saved in ``/usr/share/ansible/inventory`` if Ansible has been installed globally.  If installed to a virtualenv, the inventory scripts are installed to ``$VIRTUALENV/share/inventory``."
msgstr ""

#: ../../../rst/guide_rax.rst:170
msgid "Users of :doc:`tower` will note that dynamic inventory is natively supported by Tower, and all you have to do is associate a group with your Rackspace Cloud credentials, and it will easily synchronize without going through these steps::"
msgstr ""

#: ../../../rst/guide_rax.rst:174
msgid "``rax.py`` also accepts a ``RAX_REGION`` environment variable, which can contain an individual region, or a comma separated list of regions."
msgstr ""

#: ../../../rst/guide_rax.rst:176
msgid "When using ``rax.py``, you will not have a 'localhost' defined in the inventory."
msgstr ""

#: ../../../rst/guide_rax.rst:178
msgid "As mentioned previously, you will often be running most of these modules outside of the host loop, and will need 'localhost' defined.  The recommended way to do this, would be to create an ``inventory`` directory, and place both the ``rax.py`` script and a file containing ``localhost`` in it."
msgstr ""

#: ../../../rst/guide_rax.rst:180
msgid "Executing ``ansible`` or ``ansible-playbook`` and specifying the ``inventory`` directory instead of an individual file, will cause ansible to evaluate each file in that directory for inventory."
msgstr ""

#: ../../../rst/guide_rax.rst:183
msgid "Let's test our inventory script to see if it can talk to Rackspace Cloud."
msgstr ""

#: ../../../rst/guide_rax.rst:189
msgid "Assuming things are properly configured, the ``rax.py`` inventory script will output information similar to the following information, which will be utilized for inventory and variables."
msgstr ""

#: ../../../rst/guide_rax.rst:287
msgid "Standard Inventory"
msgstr ""

#: ../../../rst/guide_rax.rst:289
msgid "When utilizing a standard ini formatted inventory file (as opposed to the inventory plugin), it may still be advantageous to retrieve discoverable hostvar information  from the Rackspace API."
msgstr ""

#: ../../../rst/guide_rax.rst:291
msgid "This can be achieved with the ``rax_facts`` module and an inventory file similar to the following:"
msgstr ""

#: ../../../rst/guide_rax.rst:315
msgid "While you don't need to know how it works, it may be interesting to know what kind of variables are returned."
msgstr ""

#: ../../../rst/guide_rax.rst:317
msgid "The ``rax_facts`` module provides facts as followings, which match the ``rax.py`` inventory script:"
msgstr ""

#: ../../../rst/guide_rax.rst:406
msgid "Use Cases"
msgstr ""

#: ../../../rst/guide_rax.rst:408
msgid "This section covers some additional usage examples built around a specific use case."
msgstr ""

#: ../../../rst/guide_rax.rst:413
msgid "Network and Server"
msgstr ""

#: ../../../rst/guide_rax.rst:415
msgid "Create an isolated cloud network and build a server"
msgstr ""

#: ../../../rst/guide_rax.rst:456
msgid "Complete Environment"
msgstr ""

#: ../../../rst/guide_rax.rst:458
msgid "Build a complete webserver environment with servers, custom networks and load balancers, install nginx and create a custom index.html"
msgstr ""

#: ../../../rst/guide_rax.rst:562
msgid "RackConnect and Managed Cloud"
msgstr ""

#: ../../../rst/guide_rax.rst:564
msgid "When using RackConnect version 2 or Rackspace Managed Cloud there are Rackspace automation tasks that are executed on the servers you create after they are successfully built. If your automation executes before the RackConnect or Managed Cloud automation, you can cause failures and un-usable servers."
msgstr ""

#: ../../../rst/guide_rax.rst:566
msgid "These examples show creating servers, and ensuring that the Rackspace automation has completed before Ansible continues onwards."
msgstr ""

#: ../../../rst/guide_rax.rst:568
msgid "For simplicity, these examples are joined, however both are only needed when using RackConnect.  When only using Managed Cloud, the RackConnect portion can be ignored."
msgstr ""

#: ../../../rst/guide_rax.rst:570
msgid "The RackConnect portions only apply to RackConnect version 2."
msgstr ""

#: ../../../rst/guide_rax.rst:575
msgid "Using a Control Machine"
msgstr ""

#: ../../../rst/guide_rax.rst:651
msgid "Using Ansible Pull"
msgstr ""

#: ../../../rst/guide_rax.rst:708
msgid "Using Ansible Pull with XenStore"
msgstr ""

#: ../../../rst/guide_rax.rst:778
msgid "Advanced Usage"
msgstr ""

#: ../../../rst/guide_rax.rst:783
msgid "Autoscaling with Tower"
msgstr ""

#: ../../../rst/guide_rax.rst:785
msgid ":doc:`tower` also contains a very nice feature for auto-scaling use cases. In this mode, a simple curl script can call a defined URL and the server will \"dial out\" to the requester and configure an instance that is spinning up.  This can be a great way to reconfigure ephemeral nodes. See the Tower documentation for more details."
msgstr ""

#: ../../../rst/guide_rax.rst:790
msgid "A benefit of using the callback in Tower over pull mode is that job results are still centrally recorded and less information has to be shared with remote hosts."
msgstr ""

#: ../../../rst/guide_rax.rst:796
msgid "Orchestration in the Rackspace Cloud"
msgstr ""

#: ../../../rst/guide_rax.rst:798
msgid "Ansible is a powerful orchestration tool, and rax modules allow you the opportunity to orchestrate complex tasks, deployments, and configurations.  The key here is to automate provisioning of infrastructure, like any other piece of software in an environment.  Complex deployments might have previously required manual manipulation of load balancers, or manual provisioning of servers.  Utilizing the rax modules included with Ansible, one can make the deployment of additional nodes contingent on the current number of running nodes, or the configuration of a clustered application dependent on the number of nodes with common metadata.  One could automate the following scenarios, for example:"
msgstr ""

#: ../../../rst/guide_rax.rst:800
msgid "Servers that are removed from a Cloud Load Balancer one-by-one, updated, verified, and returned to the load balancer pool"
msgstr ""

#: ../../../rst/guide_rax.rst:801
msgid "Expansion of an already-online environment, where nodes are provisioned, bootstrapped, configured, and software installed"
msgstr ""

#: ../../../rst/guide_rax.rst:802
msgid "A procedure where app log files are uploaded to a central location, like Cloud Files, before a node is decommissioned"
msgstr ""

#: ../../../rst/guide_rax.rst:803
msgid "Servers and load balancers that have DNS records created and destroyed on creation and decommissioning, respectively"
msgstr ""

