# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 Ansible, Inc
# This file is distributed under the same license as the Ansible Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 0.01\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-17 17:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rst/guide_gce.rst:2
msgid "Google Cloud Platform Guide"
msgstr ""

#: ../../../rst/guide_gce.rst:7
msgid "Introduction"
msgstr ""

#: ../../../rst/guide_gce.rst:9
msgid "This section of the documentation is under construction. We are in the process of adding more examples about all of the GCE modules and how they work together. Upgrades via github pull requests are welcomed!"
msgstr ""

#: ../../../rst/guide_gce.rst:11
msgid "Ansible contains modules for managing Google Compute Engine resources, including creating instances, controlling network access, working with persistent disks, and managing load balancers.  Additionally, there is an inventory plugin that can automatically suck down all of your GCE instances into Ansible dynamic inventory, and create groups by tag and other properties."
msgstr ""

#: ../../../rst/guide_gce.rst:14
msgid "The GCE modules all require the apache-libcloud module, which you can install from pip:"
msgstr ""

#: ../../../rst/guide_gce.rst:20
msgid "If you're using Ansible on Mac OS X, libcloud also needs to access a CA cert chain. You'll need to download one (you can get one for `here <http://curl.haxx.se/docs/caextract.html>`_.)"
msgstr ""

#: ../../../rst/guide_gce.rst:23
msgid "Credentials"
msgstr ""

#: ../../../rst/guide_gce.rst:25
msgid "To work with the GCE modules, you'll first need to get some credentials. You can create new one from the `console <https://console.developers.google.com/>`_ by going to the \"APIs and Auth\" section and choosing to create a new client ID for a service account. Once you've created a new client ID and downloaded the generated private key (in the `pkcs12 format <http://en.wikipedia.org/wiki/PKCS_12>`_), you'll need to convert the key by running the following command:"
msgstr ""

#: ../../../rst/guide_gce.rst:31
msgid "There are two different ways to provide credentials to Ansible so that it can talk with Google Cloud for provisioning and configuration actions:"
msgstr ""

#: ../../../rst/guide_gce.rst:33
msgid "by providing to the modules directly"
msgstr ""

#: ../../../rst/guide_gce.rst:34
msgid "by populating a ``secrets.py`` file"
msgstr ""

#: ../../../rst/guide_gce.rst:37
msgid "Calling Modules By Passing Credentials"
msgstr ""

#: ../../../rst/guide_gce.rst:39
msgid "For the GCE modules you can specify the credentials as arguments:"
msgstr ""

#: ../../../rst/guide_gce.rst:41
msgid "``service_account_email``: email associated with the project"
msgstr ""

#: ../../../rst/guide_gce.rst:42
msgid "``pem_file``: path to the pem file"
msgstr ""

#: ../../../rst/guide_gce.rst:43
msgid "``project_id``: id of the project"
msgstr ""

#: ../../../rst/guide_gce.rst:45
msgid "For example, to create a new instance using the cloud module, you can use the following configuration:"
msgstr ""

#: ../../../rst/guide_gce.rst:73
msgid "Calling Modules with secrets.py"
msgstr ""

#: ../../../rst/guide_gce.rst:75
msgid "Create a file ``secrets.py`` looking like following, and put it in some folder which is in your ``$PYTHONPATH``:"
msgstr ""

#: ../../../rst/guide_gce.rst:82
msgid "Now the modules can be used as above, but the account information can be omitted."
msgstr ""

#: ../../../rst/guide_gce.rst:85
msgid "GCE Dynamic Inventory"
msgstr ""

#: ../../../rst/guide_gce.rst:87
msgid "The best way to interact with your hosts is to use the gce inventory plugin, which dynamically queries GCE and tells Ansible what nodes can be managed."
msgstr ""

#: ../../../rst/guide_gce.rst:89
msgid "Note that when using the inventory script ``gce.py``, you also need to populate the ``gce.ini`` file that you can find in the plugins/inventory directory of the ansible checkout."
msgstr ""

#: ../../../rst/guide_gce.rst:91
msgid "To use the GCE dynamic inventory script, copy ``gce.py`` from ``plugins/inventory`` into your inventory directory and make it executable. You can specify credentials for ``gce.py`` using the ``GCE_INI_PATH`` environment variable -- the default is to look for gce.ini in the same directory as the inventory script."
msgstr ""

#: ../../../rst/guide_gce.rst:93
msgid "Let's see if inventory is working:"
msgstr ""

#: ../../../rst/guide_gce.rst:99
msgid "You should see output describing the hosts you have, if any, running in Google Compute Engine."
msgstr ""

#: ../../../rst/guide_gce.rst:101
msgid "Now let's see if we can use the inventory script to talk to Google."
msgstr ""

#: ../../../rst/guide_gce.rst:112
msgid "As with all dynamic inventory plugins in Ansible, you can configure the inventory path in ansible.cfg.  The recommended way to use the inventory is to create an ``inventory`` directory, and place both the ``gce.py`` script and a file containing ``localhost`` in it.  This can allow for cloud inventory to be used alongside local inventory (such as a physical datacenter) or machines running in different providers."
msgstr ""

#: ../../../rst/guide_gce.rst:114
msgid "Executing ``ansible`` or ``ansible-playbook`` and specifying the ``inventory`` directory instead of an individual file will cause ansible to evaluate each file in that directory for inventory."
msgstr ""

#: ../../../rst/guide_gce.rst:116
msgid "Let's once again use our inventory script to see if it can talk to Google Cloud:"
msgstr ""

#: ../../../rst/guide_gce.rst:127
msgid "The output should be similar to the previous command.  If you're wanting less output and just want to check for SSH connectivity, use \"-m\" ping instead."
msgstr ""

#: ../../../rst/guide_gce.rst:130
msgid "Use Cases"
msgstr ""

#: ../../../rst/guide_gce.rst:132
msgid "For the following use case, let's use this small shell script as a wrapper."
msgstr ""

#: ../../../rst/guide_gce.rst:155
msgid "Create an instance"
msgstr ""

#: ../../../rst/guide_gce.rst:157
msgid "The GCE module provides the ability to provision instances within Google Compute Engine. The provisioning task is typically performed from your Ansible control server against Google Cloud's API."
msgstr ""

#: ../../../rst/guide_gce.rst:159
msgid "A playbook would looks like this:"
msgstr ""

#: ../../../rst/guide_gce.rst:203
msgid "Note that use of the \"add_host\" module above creates a temporary, in-memory group.  This means that a play in the same playbook can then manage machines in the 'new_instances' group, if so desired.  Any sort of arbitrary configuration is possible at this point."
msgstr ""

#: ../../../rst/guide_gce.rst:207
msgid "Configuring instances in a group"
msgstr ""

#: ../../../rst/guide_gce.rst:209
msgid "All of the created instances in GCE are grouped by tag.  Since this is a cloud, it's probably best to ignore hostnames and just focus on group management."
msgstr ""

#: ../../../rst/guide_gce.rst:211
msgid "Normally we'd also use roles here, but the following example is a simple one.  Here we will also use the \"gce_net\" module to open up access to port 80 on these nodes."
msgstr ""

#: ../../../rst/guide_gce.rst:214
msgid "The variables in the 'vars' section could also be kept in a 'vars_files' file or something encrypted with Ansible-vault, if you so choose.  This is just a basic example of what is possible::"
msgstr ""

#: ../../../rst/guide_gce.rst:245
msgid "By pointing your browser to the IP of the server, you should see a page welcoming you."
msgstr ""

#: ../../../rst/guide_gce.rst:247
msgid "Upgrades to this documentation are welcome, hit the github link at the top right of this page if you would like to make additions!"
msgstr ""

